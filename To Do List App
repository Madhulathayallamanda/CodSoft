import { useState, useEffect } from 'react'
import { Button } from "/components/ui/button"
import { Input } from "/components/ui/input"
import { Checkbox } from "/components/ui/checkbox"
import { Label } from "/components/ui/label"
import { Trash } from "lucide-react"

interface Task {
  id: number
  description: string
  completed: boolean
}

export default function TodoList() {
  const [tasks, setTasks] = useState<Task[]>([])
  const [taskInput, setTaskInput] = useState('')

  useEffect(() => {
    const storedTasks = localStorage.getItem('tasks')
    if (storedTasks) {
      setTasks(JSON.parse(storedTasks))
    }
  }, [])

  useEffect(() => {
    localStorage.setItem('tasks', JSON.stringify(tasks))
  }, [tasks])

  const addTask = () => {
    if (taskInput.trim()) {
      const newTask: Task = {
        id: Date.now(),
        description: taskInput,
        completed: false,
      }
      setTasks([...tasks, newTask])
      setTaskInput('')
    }
  }

  const toggleTaskCompletion = (id: number) => {
    setTasks(tasks.map(task => (task.id === id ? { ...task, completed: !task.completed } : task)))
  }

  const deleteTask = (id: number) => {
    setTasks(tasks.filter(task => task.id !== id))
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-white">
      <header className="mb-8">
        <h1 className="text-3xl font-bold">To-Do List</h1>
      </header>
      <main className="w-full max-w-md">
        <div className="mb-4">
          <Input
            type="text"
            value={taskInput}
            onChange={(e) => setTaskInput(e.target.value)}
            placeholder="Add a new task"
            className="w-full mb-2"
          />
          <Button onClick={addTask} className="w-full">
            Add Task
          </Button>
        </div>
        <div className="space-y-2">
          {tasks.map(task => (
            <div key={task.id} className="flex items-center justify-between p-2 border rounded bg-gray-100">
              <div className="flex items-center">
                <Checkbox
                  id={`task-${task.id}`}
                  checked={task.completed}
                  onCheckedChange={() => toggleTaskCompletion(task.id)}
                />
                <Label htmlFor={`task-${task.id}`} className={`ml-2 ${task.completed ? 'line-through' : ''}`}>
                  {task.description}
                </Label>
              </div>
              <Button variant="destructive" onClick={() => deleteTask(task.id)}>
                <Trash className="w-4 h-4" />
              </Button>
            </div>
          ))}
        </div>
      </main>
      <footer className="mt-8">
        <p className="text-gray-500">You have {tasks.length} tasks.</p>
      </footer>
    </div>
  )
}
